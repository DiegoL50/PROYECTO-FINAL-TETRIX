 def move_down(self, group):
        """
        Mueve el bloque hacia abajo. Verifica colisiones y límites del área de juego.
        Si se alcanza el fondo o se colisiona con otro bloque, se lanza BottomReached.
        """
        self.y += 1
        if self.rect.bottom > GRID_HEIGHT or Block.collide(self, group):
            self.y -= 1
            self.current = False
            raise BottomReached

    def rotate(self, group):
        """
        Rota el bloque. Verifica colisiones y ajusta la posición si es necesario.
        """
        self.image = pygame.transform.rotate(self.image, 90)
        self.rect.width = self.image.get_width()
        self.rect.height = self.image.get_height()
        self._create_mask()
        # Ajustar la posición del bloque si excede los límites o colisiona.
        while self.rect.right > GRID_WIDTH:
            self.x -= 1
        while self.rect.left < 0:
            self.x += 1
        while self.rect.bottom > GRID_HEIGHT:
            self.y -= 1
        while True:
            if not Block.collide(self, group):
                break
            self.y -= 1
        self.struct = np.rot90(self.struct)

    def update(self):
        """
        Actualiza el estado del bloque. Por defecto, lo mueve hacia abajo si está activo.
        """
        if self.current:
            self.move_down()


class SquareBlock(Block):
    """
    Define un bloque cuadrado en el juego. Hereda de la clase Block.
    La estructura del bloque es un cuadrado 2x2.
    """
    struct = (
        (1, 1),
        (1, 1)
    )


class TBlock(Block):
    """
    Define un bloque en forma de 'T' en el juego. Hereda de la clase Block.
    La estructura del bloque se asemeja a la letra T.
    """
    struct = (
        (1, 1, 1),
        (0, 1, 0),
        (0, 1, 0),
    )


class LineBlock(Block):
    """
    Define un bloque en forma de línea en el juego. Hereda de la clase Block.
    La estructura del bloque es una línea vertical de 1x4.
    """
    struct = (
        (1,),
        (1,),
        (1,),
        (1,)
    )


class LBlock(Block):
    """
    Define un bloque en forma de 'L' en el juego. Hereda de la clase Block.
    La estructura del bloque se asemeja a la letra L.
    """
    struct = (
        (1, 1),
        (1, 0),
        (1, 0),
    )


class ZBlock(Block):
    """
    Define un bloque en forma de 'Z' en el juego. Hereda de la clase Block.
    La estructura del bloque se asemeja a la letra Z.
    """
    struct = (
        (0, 1),
        (1, 1),
        (1, 0),
    )


class PyramidBlock(Block):
    struct = (
        (0, 1, 0),
        (1, 1, 1),
    )


class SmallLBlock(Block):
    struct = (
        (1, 1),
        (1, 0),
    )


class InvPyramidBlock(Block):
    struct = (
        (1, 1, 1),
        (1, 0, 1)
    )


class LwithDotBlock(Block):
    struct = (
        (0, 1, 0),
        (1, 1, 0),
        (0, 1, 1),
    )


class LineWithDotBlock(Block):
    struct = (
        (1, 0),
        (1, 1),
        (1, 0),
        (1, 0),
    )


class StarBlock(Block):
    struct = (
        (0, 1, 0),
        (1, 1, 1),
        (0, 1, 0),
    )


class LargeZBlock(Block):
    struct = (
        (0, 1, 1),
        (0, 1, 0),
        (1, 1, 0),
    )


class BlocksGroup(pygame.sprite.OrderedUpdates):

    total = 0
    """
    Gestiona un grupo de bloques en el juego. Hereda de pygame.sprite.OrderedUpdates,
    que es un grupo de sprites que mantiene el orden de los sprites.
    """

    @staticmethod
    def get_random_block():
        """
        Devuelve un bloque aleatorio de entre los tipos definidos.
        """
        return random.choice(
            (SquareBlock, TBlock, LineBlock, LBlock, ZBlock, PyramidBlock, SmallLBlock, InvPyramidBlock, LwithDotBlock,
             LineWithDotBlock, StarBlock, LargeZBlock))()

