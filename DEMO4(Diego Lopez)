def __init__(self, *args, **kwargs):
        """
        Inicializa el grupo de bloques. Establece el grid, maneja la puntuación,
        y crea el primer bloque del juego.
        """
        super().__init__(self, *args, **kwargs)
        self._reset_grid()
        self._ignore_next_stop = False
        self.score = 0
        self.next_block = None
        # No se mueve realmente, solo para inicializar el atributo.
        self.stop_moving_current_block()
        # El primer bloque.
        self._create_new_block()

    def _check_line_completion(self):
        """
        Revisa cada línea del grid y elimina aquellas que estén completas.
        Aumenta la puntuación por cada línea completada.
        """
        # Empieza a revisar desde la parte inferior.
        for i, row in enumerate(self.grid[::-1]):
            if all(row):
                self.score += 5
                BlocksGroup.total += self.score
                # Obtiene los bloques afectados por la eliminación de la línea y
                # elimina duplicados.
                affected_blocks = list(
                    OrderedDict.fromkeys(self.grid[-1 - i]))

                for block, y_offset in affected_blocks:
                    # Elimina los tiles del bloque que pertenecen a la
                    # línea completada.
                    block.struct = np.delete(block.struct, y_offset, 0)
                    if block.struct.any():
                        # Una vez eliminado, verifica si hay columnas vacías
                        # ya que necesitan ser eliminadas.
                        block.struct, x_offset = \
                            remove_empty_columns(block.struct)
                        # Compensa el espacio eliminado con las columnas para
                        # mantener la posición original del bloque.
                        block.x += x_offset
                        # Fuerza la actualización.
                        block.redraw()
                    else:
                        # Si la estructura está vacía, el bloque desaparece.
                        self.remove(block)

                # En lugar de verificar qué bloques necesitan moverse
                # una vez completada una línea, intenta mover todos los
                # bloques.
                for block in self:
                    # Excepto el bloque actual.
                    if block.current:
                        continue
                    # Baja cada bloque hasta que alcance el fondo o colisione
                    # con otro bloque.
                    while True:
                        try:
                            block.move_down(self)
                        except BottomReached:
                            break

                self.update_grid()
                # Como hemos actualizado el grid, ahora el contador i
                # ya no es válido, así que llama de nuevo a la función
                # para verificar si hay otras líneas completadas en el
                # nuevo grid.
                self._check_line_completion()
                break

    def _reset_grid(self):
        """
        Reinicia el grid del juego. El grid es una representación 2D de la ubicación
        de los bloques en el juego.
        """
        self.grid = [[0 for _ in range(10)] for _ in range(20)]

    def _create_new_block(self):
        """
        Crea un nuevo bloque y lo añade al juego. Si hay una colisión al crear un
        nuevo bloque, se lanza la excepción TopReached.
        """
        new_block = self.next_block or BlocksGroup.get_random_block()
        if Block.collide(new_block, self):
            raise TopReached
        self.add(new_block)
        self.next_block = BlocksGroup.get_random_block()
        self.update_grid()
        self._check_line_completion()

    def update_grid(self):
        """
        Actualiza el grid del juego basándose en la posición y la estructura de
        los bloques actuales.
        """
        self._reset_grid()
        for block in self:
            for y_offset, row in enumerate(block.struct):
                for x_offset, digit in enumerate(row):
                    # Previene reemplazar bloques anteriores.
                    if digit == 0:
                        continue
                    rowid = block.y + y_offset
                    colid = block.x + x_offset
                    self.grid[rowid][colid] = (block, y_offset)

    @property
    def current_block(self):
        """
        Devuelve el bloque actual (el último en la lista de sprites).
        """
        return self.sprites()[-1]

    def update_current_block(self):
        """
        Actualiza la posición del bloque actual, moviéndolo hacia abajo.
        Si el bloque alcanza el fondo, detiene su movimiento y crea un nuevo bloque.
        """
        try:
            self.current_block.move_down(self)
        except BottomReached:
            self.stop_moving_current_block()
            self._create_new_block()
        else:
            self.update_grid()

    def move_current_block(self):
        """
        Mueve el bloque actual según la dirección indicada. Si se alcanza el fondo
        durante el movimiento, se detiene el movimiento y se crea un nuevo bloque.
        """
        # Primero verifica si hay algo que mover.
        if self._current_block_movement_heading is None:
            return
        action = {
            pygame.K_DOWN: self.current_block.move_down,
            pygame.K_LEFT: self.current_block.move_left,
            pygame.K_RIGHT: self.current_block.move_right
        }
        try:
            # Cada función requiere el grupo como primer argumento
            # para verificar posibles colisiones.
            action[self._current_block_movement_heading](self)
        except BottomReached:
            self.stop_moving_current_block()
            self._create_new_block()
        else:
            self.update_grid()

    def start_moving_current_block(self, key):
        """
        Inicia el movimiento del bloque actual en la dirección dada por 'key'.
        Si ya se está moviendo, ignora el próximo comando de detener.
        """
        if self._current_block_movement_heading is not None:
            self._ignore_next_stop = True
        self._current_block_movement_heading = key

    def stop_moving_current_block(self):
        """
        Detiene el movimiento del bloque actual. Si se debe ignorar el próximo
        comando de detener, simplemente resetea esa bandera.
        """
        if self._ignore_next_stop:
            self._ignore_next_stop = False
        else:
            self._current_block_movement_heading = None

    def rotate_current_block(self):
        """
        Rota el bloque actual. Previene la rotación de SquareBlocks.
        Actualiza el grid después de la rotación.
        """
        if not isinstance(self.current_block, SquareBlock):
            self.current_block.rotate(self)
            self.update_grid()

